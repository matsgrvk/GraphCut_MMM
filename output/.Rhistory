mat_min[xmin,ymin] = which.min(abs(tmp_bias_future[xmin,ymin,]))-1
}
}
t=t+1
label_attribution_min_bias[,,t] <- mat_min
}
label_attribution_pr_min_bias <- label_attribution_bias_pr_min_bias <- array(0,c(nrow = height,ncol = width,length(model_version_20mod)))
tmp_label_attribution_pr_min_bias <- tmp_label_attribution_bias_pr_min_bias <- matrix(0,nrow = height,ncol = width)
for(m in 1:length(model_version_20mod)){
var_ref = get(paste0(var,"_",model_version_20mod[[m]]))
var_ref_future = get(paste0(var,"_",model_version_20mod[[m]],"_2100"))
var_list <- list()
var_list_future <- list()
bias_list <- list()
bias_list_future <- list()
for(i in 1:length(model_version_20mod)){
var_list[[i]] <- get(paste0(var,"_",model_version_20mod[[i]]))
var_list_future[[i]] <- get(paste0(var,"_",model_version_20mod[[i]],"_2100"))
bias_list[[i]] <- var_list[[i]]- var_ref
bias_list_future[[i]] <- var_list_future[[i]]- var_ref_future
}
var_list[[m]] = bias_list[[m]] = var_list_future[[m]] = bias_list_future[[m]] = NULL
labs <- sapply(var_list, identity, simplify = "array")
labs_future <- sapply(var_list_future, identity, simplify = "array")
bias <- sapply(bias_list, identity, simplify = "array")
bias_future <- sapply(bias_list_future, identity, simplify = "array")
for(l in 0:(length(model_version_20mod)-2)){
islabel <- which(label_attribution_min_bias[,,m] == l)
label_attribution_pr_min_bias[,,m][islabel] <- labs_future[,,(l+1)][islabel]
label_attribution_bias_pr_min_bias[,,m][islabel] <- bias_future[,,(l+1)][islabel]
}
}
list.of.packages <- c("ncdf4","fields","maps","mapdata","RcppXPtrUtils","devtools","paramtest","overlapping","lattice","reshape2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,repos = "http://cran.us.r-project.org")
lapply(list.of.packages, library, character.only = TRUE)
image.plot(label_attribution_min_bias[,,1])
image.plot(label_attribution_min_bias[,,20])
image.plot(label_attribution_bias_pr_min_bias[,,20])
image.plot(label_attribution_pr_min_bias[,,20])
model_20mod <- TAS_MODELS[c(1,3,4,5,7,8,11,12,13,16,17,20,22,24,26,30,31,33,34,37),1]
model_version_20mod <- TAS_MODELS[c(1,3,4,5,7,8,11,12,13,16,17,20,22,24,26,30,31,33,34,37),2]
for(m in 1:length(model_version_20mod)){
var_ref = get(paste0(var,"_",model_version_20mod[[m]]))
var_ref_future = get(paste0(var,"_",model_version_20mod[[m]],"_2100"))
var_list <- list()
var_list_future <- list()
bias_list <- list()
bias_list_future <- list()
for(i in 1:length(model_version_20mod)){
var_list[[i]] <- get(paste0(var,"_",model_version_20mod[[i]]))
var_list_future[[i]] <- get(paste0(var,"_",model_version_20mod[[i]],"_2100"))
bias_list[[i]] <- var_list[[i]]- var_ref
bias_list_future[[i]] <- var_list_future[[i]]- var_ref_future
}
var_list[[m]] = bias_list[[m]] = var_list_future[[m]] = bias_list_future[[m]] = NULL
labs <- sapply(var_list, identity, simplify = "array")
labs_future <- sapply(var_list_future, identity, simplify = "array")
bias <- sapply(bias_list, identity, simplify = "array")
bias_future <- sapply(bias_list_future, identity, simplify = "array")
tmp_bias <- bias
tmp_bias_future <- bias_future
bias = c(aperm(bias, c(2, 1, 3)))
bias_future = c(aperm(bias_future, c(2, 1, 3)))
tmp_bias_pr_mmm <- bias_pr_mmm <- array(0,c(nrow(var_ref),ncol(var_ref),length(model_version_20mod)))
tmp_pr_mmm <- pr_mmm <-  array(0,c(nrow(var_ref),ncol(var_ref),length(model_version_20mod)))
for(i in 1:length(bias_list_future)){
tmp_bias_pr_mmm[,,i] <- bias_list_future[[i]]
}
bias_pr_mmm[,,m] <- apply(tmp_bias_pr_mmm, 1:2, mean)
for(i in 1:length(var_list_future)){
tmp_pr_mmm[,,i] <- var_list_future[[i]]
}
pr_mmm[,,m] <- apply(tmp_pr_mmm, 1:2, mean)
}
save(bias_pr_mmm,pr_mmm,file="bias_pr_mmm.rdata")
save(label_attribution_min_bias,label_attribution_bias_min_bias,label_attribution_pr_min_bias,file="label_attrib_bias_pr_gc_min_bias.rdata")
save(label_attribution_min_bias,label_attribution_bias_pr_min_bias,label_attribution_pr_min_bias,file="label_attrib_bias_pr_gc_min_bias.rdata")
model_version_20mod
model_20mod
library(gcoWrapR)
# instanciation of class GCoptimizationGridGraph
gco <- new(GCoptimizationGridGraph, width, height, nlabs)
data_smooth_list_present <- array(0,c(length(model_version_20mod)))
data_smooth_list_present
for(i in 1:length(data_smooth_list_present)){
data_smooth_list_present[i] <- i
}
data_smooth_list_present
is.integer(1)
is.vector(1)
for(m in 1:length(model_version_20mod)){
gc_present_grad_test[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(gc_present_up[,,m]-gc_present_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(gc_present_down[,,m]-gc_present_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(gc_present_left[,,m]-gc_present_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(gc_present_right[,,m]-gc_present_centered[,,m]))^2)/4
gc_hybrid_grad[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(gc_hybrid_up[,,m]-gc_hybrid_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(gc_hybrid_down[,,m]-gc_hybrid_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(gc_hybrid_left[,,m]-gc_hybrid_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(gc_hybrid_right[,,m]-gc_hybrid_centered[,,m]))^2)/4
gc_future_grad[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(gc_future_up[,,m]-gc_future_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(gc_future_down[,,m]-gc_future_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(gc_future_left[,,m]-gc_future_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(gc_future_right[,,m]-gc_future_centered[,,m]))^2)/4
mmm_grad[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(mmm_up[,,m]-mmm_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(mmm_down[,,m]-mmm_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(mmm_left[,,m]-mmm_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(mmm_right[,,m]-mmm_centered[,,m]))^2)/4
min_bias_grad[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(min_bias_up[,,m]-min_bias_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(min_bias_down[,,m]-min_bias_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(min_bias_left[,,m]-min_bias_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(min_bias_right[,,m]-min_bias_centered[,,m]))^2)/4
}
ref_centered <- ref[2:(nrow(ref)-1),2:(ncol(ref)-1),]
ref <- gc_present <- gc_hybrid <- gc_future <- mmm <- min_bias <- array(0, c(nrow=height,ncol=width,length(model_version_20mod)))
for(m in 1:length(model_version_20mod)){
ref[,,m] <- get(paste0("tas_",model_version_20mod[[m]],"_2100"))
gc_present[,,m] <- label_attribution_tas_present[,,m]
gc_hybrid[,,m] <- label_attribution_tas_hybrid[,,m]
gc_future[,,m] <- label_attribution_tas_future[,,m]
mmm[,,m] <- tas_mmm[,,m]
min_bias[,,m] <- label_attribution_tas_min_bias[,,m]
}
var="tas"
load(paste0("load_",var,"_cv.rdata"))
for(m in 1:length(model_version_20mod)){
ref[,,m] <- get(paste0("tas_",model_version_20mod[[m]],"_2100"))
gc_present[,,m] <- label_attribution_tas_present[,,m]
gc_hybrid[,,m] <- label_attribution_tas_hybrid[,,m]
gc_future[,,m] <- label_attribution_tas_future[,,m]
mmm[,,m] <- tas_mmm[,,m]
min_bias[,,m] <- label_attribution_tas_min_bias[,,m]
}
load("label_attrib_bias_tas_gc_present.rdata")
setwd("~/Bureau/Stage_M2/Codes/clean_files/workspace")
load("label_attrib_bias_tas_gc_present.rdata")
load("label_attrib_bias_tas_gc_hybrid.rdata")
load("label_attrib_bias_tas_gc_future.rdata")
load("bias_tas_mmm.rdata")
load("label_attrib_bias_tas_min_bias.rdata")
for(m in 1:length(model_version_20mod)){
ref[,,m] <- get(paste0("tas_",model_version_20mod[[m]],"_2100"))
gc_present[,,m] <- label_attribution_tas_present[,,m]
gc_hybrid[,,m] <- label_attribution_tas_hybrid[,,m]
gc_future[,,m] <- label_attribution_tas_future[,,m]
mmm[,,m] <- tas_mmm[,,m]
min_bias[,,m] <- label_attribution_tas_min_bias[,,m]
}
ref_centered <- ref[2:(nrow(ref)-1),2:(ncol(ref)-1),]
ref_up <- ref[1:(nrow(ref)-2),2:(ncol(ref)-1),]
ref_down <- ref[3:nrow(ref),2:(ncol(ref)-1),]
ref_left <- ref[2:(nrow(ref)-1),1:(ncol(ref)-2),]
ref_right <- ref[2:(nrow(ref)-1),3:ncol(ref),]
gc_present_centered <- gc_present[2:(nrow(gc_present)-1),2:(ncol(gc_present)-1),]
gc_present_up <- gc_present[1:(nrow(gc_present)-2),2:(ncol(gc_present)-1),]
gc_present_down <- gc_present[3:nrow(gc_present),2:(ncol(gc_present)-1),]
gc_present_left <- gc_present[2:(nrow(gc_present)-1),1:(ncol(gc_present)-2),]
gc_present_right <- gc_present[2:(nrow(gc_present)-1),3:ncol(gc_present),]
gc_hybrid_centered <- gc_hybrid[2:(nrow(gc_hybrid)-1),2:(ncol(gc_hybrid)-1),]
gc_hybrid_up <- gc_hybrid[1:(nrow(gc_hybrid)-2),2:(ncol(gc_hybrid)-1),]
gc_hybrid_down <- gc_hybrid[3:nrow(gc_hybrid),2:(ncol(gc_hybrid)-1),]
gc_hybrid_left <- gc_hybrid[2:(nrow(gc_hybrid)-1),1:(ncol(gc_hybrid)-2),]
gc_hybrid_right <- gc_hybrid[2:(nrow(gc_hybrid)-1),3:ncol(gc_hybrid),]
gc_future_centered <- gc_future[2:(nrow(gc_future)-1),2:(ncol(gc_future)-1),]
gc_future_up <- gc_future[1:(nrow(gc_future)-2),2:(ncol(gc_future)-1),]
gc_future_down <- gc_future[3:nrow(gc_future),2:(ncol(gc_future)-1),]
gc_future_left <- gc_future[2:(nrow(gc_future)-1),1:(ncol(gc_future)-2),]
gc_future_right <- gc_future[2:(nrow(gc_future)-1),3:ncol(gc_future),]
mmm_centered <- mmm[2:(nrow(mmm)-1),2:(ncol(mmm)-1),]
mmm_up <- mmm[1:(nrow(mmm)-2),2:(ncol(mmm)-1),]
mmm_down <- mmm[3:nrow(mmm),2:(ncol(mmm)-1),]
mmm_left <- mmm[2:(nrow(mmm)-1),1:(ncol(mmm)-2),]
mmm_right <- mmm[2:(nrow(mmm)-1),3:ncol(mmm),]
min_bias_centered <- min_bias[2:(nrow(min_bias)-1),2:(ncol(min_bias)-1),]
min_bias_up <- min_bias[1:(nrow(min_bias)-2),2:(ncol(min_bias)-1),]
min_bias_down <- min_bias[3:nrow(min_bias),2:(ncol(min_bias)-1),]
min_bias_left <- min_bias[2:(nrow(min_bias)-1),1:(ncol(min_bias)-2),]
min_bias_right <- min_bias[2:(nrow(min_bias)-1),3:ncol(min_bias),]
gc_present_grad_test <- gc_hybrid_grad <- gc_future_grad <- mmm_grad <- min_bias_grad <- array(0,c(nrow(ref_centered),ncol(ref_centered),length(model_version_20mod)))
for(m in 1:length(model_version_20mod)){
gc_present_grad_test[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(gc_present_up[,,m]-gc_present_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(gc_present_down[,,m]-gc_present_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(gc_present_left[,,m]-gc_present_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(gc_present_right[,,m]-gc_present_centered[,,m]))^2)/4
gc_hybrid_grad[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(gc_hybrid_up[,,m]-gc_hybrid_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(gc_hybrid_down[,,m]-gc_hybrid_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(gc_hybrid_left[,,m]-gc_hybrid_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(gc_hybrid_right[,,m]-gc_hybrid_centered[,,m]))^2)/4
gc_future_grad[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(gc_future_up[,,m]-gc_future_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(gc_future_down[,,m]-gc_future_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(gc_future_left[,,m]-gc_future_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(gc_future_right[,,m]-gc_future_centered[,,m]))^2)/4
mmm_grad[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(mmm_up[,,m]-mmm_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(mmm_down[,,m]-mmm_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(mmm_left[,,m]-mmm_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(mmm_right[,,m]-mmm_centered[,,m]))^2)/4
min_bias_grad[,,m] = (((ref_up[,,m]-ref_centered[,,m])-(min_bias_up[,,m]-min_bias_centered[,,m]))^2+((ref_down[,,m]-ref_centered[,,m])-(min_bias_down[,,m]-min_bias_centered[,,m]))^2+((ref_left[,,m]-ref_centered[,,m])-(min_bias_left[,,m]-min_bias_centered[,,m]))^2+((ref_right[,,m]-ref_centered[,,m])-(min_bias_right[,,m]-min_bias_centered[,,m]))^2)/4
}
load("~/Bureau/Stage_M2/Codes/workspace/gradient_bias_gc_mmm_min_bias.rdata")
all.equal(gc_present_grad[,,1],gc_present_grad_test[,,1])
all.equal(gc_present_grad[2:(nrow(gc_present_grad)-1),2:(ncol(gc_present_grad)-1),1],gc_present_grad_test[,,1])
graphcut <- function(var_present,var_future,weight_data,weight_smooth){
### var_present and var_future : arrays of models outputs used in the GraphCut
### weight_data and weight_smooth : number (1 for both is approximatly the optimal choice)
nlabs = length(model_names)-1 ### Number of labels used in the GC. Needs to be total number -1 since C++ index starts from 0
width = ncol(get(ref))
height = nrow(get(ref))
# Instanciation of the GraphCut environment
gco <- new(GCoptimizationGridGraph, width, height, nlabs)
# Preparing the DataCost and SmoothCost functions of the GraphCut in C++
ptrDataCost <- cppXPtr(
code = 'float dataFn(int p, int l, Rcpp::List extraData)
{
int numPix = extraData["numPix"];
float weight = extraData["weight"];
NumericVector data = extraData["data"];
return(weight * std::abs(data[p + numPix * l]) );
}',
includes = c("#include <math.h>", "#include <Rcpp.h>"),
rebuild = TRUE, showOutput = FALSE, verbose = TRUE
)
ptrSmoothCost <- cppXPtr(
code = 'float smoothFn(int p1, int p2, int l1, int l2, Rcpp::List extraData)
{
int numPix = extraData["numPix"];
float weight = extraData["weight"];
NumericVector data = extraData["data"];
float cost = std::abs(data[p1 + numPix * l1]-data[p1 + numPix * l2])
+ std::abs(data[p2 + numPix * l1] - data[p2 + numPix * l2]) ;
return(weight * cost);
}',
includes = c("#include <math.h>", "#include <Rcpp.h>"),
rebuild = TRUE, showOutput = FALSE, verbose = TRUE
)
# Preparing the data to perform GraphCut
label_attribution <- array(0,c(nrow = height,ncol = width,length(model_names))) ### Each dimension contains the GraphCut result for a given reference
data_smooth_list <- vector("list",length(model_names)) ### Values of data and smooth energy for each GraphCut
t=0
bias <- bias_future <- array(0,c(nrow = height,ncol = width,length(model_names))) ### Creating the bias arrays to set the data and smooth cost functions
for(i in 1:length(model_names)){
bias[,,i] <- var_present[,,i] - ref
bias_future[,,i] <- var_future[,,i] - ref_future
}
bias_cpp = c(aperm(bias, c(2, 1, 3))) ### Permuting longitude and latitude since the indexing isn't the same in R and in C++
bias_future_cpp = c(aperm(bias_future, c(2, 1, 3)))
gco$setDataCost(ptrDataCost, list(numPix = width * height, data = bias_cpp, weight = weight_data))
gco$setSmoothCost(ptrSmoothCost, list(numPix = width * height, data = bias_cpp, weight = weight_smooth))
mat_init <- matrix(0,height,width) ### Creating an initialization matrix
vec_init <- as.vector(t(mat_min)) ### Permuting the indexing from R to C++
for(z in 0:(length(mat_init)-1)){
gco$setLabel(z,vec_init[z+1]) ### Setting the labels for the alpha-beta swap algorithm
}
# Optimizing the MRF energy with alpha-beta swap (-1 refers to the optimization until convergence)
gco$swap(-1)
data_cost <- gco$giveDataEnergy() ### Storing the energies for the GraphCut
smooth_cost <- gco$giveSmoothEnergy()
t=t+1
data_smooth_list[[t]] <- list("Data cost" = data_cost, "Smooth cost" = smooth_cost)
tmp_label_attribution <- matrix(0, nrow=height, ncol=width) ### Creating the label attribution matrix
for(j in 1:height){
for(i in 1:width){
tmp_label_attribution[j,i] <- gco$whatLabel((i - 1) + width * (j - 1)) ### Permuting from the C++ indexing to the R indexing
}
}
label_attribution[,,t] <- tmp_label_attribution
}
var="tas" #### Variable utilisée : "tas" ou "pr"
setwd("/homel/mgarvik/Bureau/Stage_M2/Codes/clean_files/workspace/")
load("models_list.rdata")
load(paste0("load_",var,"_cv.rdata"))
model_names <- TAS_MODELS[c(1,3,4,5,7,8,11,12,13,16,17,20,22,24,26,30,31,33,34,37),2] #### Names of models used in the ensemble
for(i in 1:length(model_names)){
var_present[,,i] <- get(paste0(var,"_",model_names[[i]]))
var_future[,,i] <- get(paste0(var,"_",model_names[[i]],"_2100"))
}
var="tas" #### Variable utilisée : "tas" ou "pr"
load("models_list.rdata")
load(paste0("load_",var,"_cv.rdata"))
model_names <- TAS_MODELS[c(1,3,4,5,7,8,11,12,13,16,17,20,22,24,26,30,31,33,34,37),2] #### Names of models used in the ensemble
model_names
ref <- `tas_bcc-csm1-1`
ref_future <- `tas_bcc-csm1-1_2100`
rm(ref)
rm(ref_future)
ref <- get(paste0("tas_",model_names[[1]]))
ref_future <- get(paste0("tas_",model_names[[1]],"_2100"))
var_present <- var_future <- array(0,c(nrow = height,ncol = width,length(model_names)))
var_present <- var_future <- array(0,c(nrow = nrow(ref),ncol = ncol(ref),length(model_names)))
for(i in 1:length(model_names)){
var_present[,,i] <- get(paste0(var,"_",model_names[[i]]))
var_future[,,i] <- get(paste0(var,"_",model_names[[i]],"_2100"))
}
var_present[,,1] = var_future[,,1]  = NULL
var_present[,,1] <- var_future[,,1] = NULL
var_present[,,1] <- var_future[,,1] <- NULL
var_present <- var_future <- array(0,c(nrow = nrow(ref),ncol = ncol(ref),length(model_names)))
for(i in 1:length(model_names)){
var_present[,,i] <- get(paste0(var,"_",model_names[[i]]))
var_future[,,i] <- get(paste0(var,"_",model_names[[i]],"_2100"))
if(var_present[,,i] == ref){
var_present[,,i] = NULL
}
if(var_future[,,i] == ref_future){
var_future[,,i] = NULL
}
}
?drop
all.equal(var_present[,,1],ref)
ref
var_present[,,1]
all.equal(var_present[,,1],ref[,])
all.equal(var_present[1,1,1],ref[1,1])
all.equal(var_present[1,2,1],ref[1,2])
var_present <- var_future <- array(0,c(nrow = nrow(ref),ncol = ncol(ref),length(model_names)-1))
for(i in 2:length(model_names)){
var_present[,,i] <- get(paste0(var,"_",model_names[[i]]))
var_future[,,i] <- get(paste0(var,"_",model_names[[i]],"_2100"))
}
i
2:length(model_names)
length(2:length(model_names))
model_names <- TAS_MODELS[c(3,4,5,7,8,11,12,13,16,17,20,22,24,26,30,31,33,34,37),2] #### Names of models used in the ensemble
ref <- `tas_bcc-csm1-1`
ref_future <- `tas_bcc-csm1-1_2100`
var_present <- var_future <- array(0,c(nrow = nrow(ref),ncol = ncol(ref),length(model_names)))
for(i in 1:length(model_names)){
var_present[,,i] <- get(paste0(var,"_",model_names[[i]]))
var_future[,,i] <- get(paste0(var,"_",model_names[[i]],"_2100"))
}
source("gc_function.R")
graphcut(var_present,var_future,1,1)
graphcut <- function(var_present,var_future,weight_data,weight_smooth){
### var_present and var_future : arrays of models outputs used in the GraphCut
### weight_data and weight_smooth : number (1 for both is approximatly the optimal choice)
nlabs = length(model_names)-1 ### Number of labels used in the GC. Needs to be total number -1 since C++ index starts from 0
width = ncol(ref)
height = nrow(ref)
# Instanciation of the GraphCut environment
gco <- new(GCoptimizationGridGraph, width, height, nlabs)
# Preparing the DataCost and SmoothCost functions of the GraphCut in C++
ptrDataCost <- cppXPtr(
code = 'float dataFn(int p, int l, Rcpp::List extraData)
{
int numPix = extraData["numPix"];
float weight = extraData["weight"];
NumericVector data = extraData["data"];
return(weight * std::abs(data[p + numPix * l]) );
}',
includes = c("#include <math.h>", "#include <Rcpp.h>"),
rebuild = TRUE, showOutput = FALSE, verbose = TRUE
)
ptrSmoothCost <- cppXPtr(
code = 'float smoothFn(int p1, int p2, int l1, int l2, Rcpp::List extraData)
{
int numPix = extraData["numPix"];
float weight = extraData["weight"];
NumericVector data = extraData["data"];
float cost = std::abs(data[p1 + numPix * l1]-data[p1 + numPix * l2])
+ std::abs(data[p2 + numPix * l1] - data[p2 + numPix * l2]) ;
return(weight * cost);
}',
includes = c("#include <math.h>", "#include <Rcpp.h>"),
rebuild = TRUE, showOutput = FALSE, verbose = TRUE
)
# Preparing the data to perform GraphCut
label_attribution <- array(0,c(nrow = height,ncol = width,length(model_names))) ### Each dimension contains the GraphCut result for a given reference
data_smooth_list <- vector("list",length(model_names)) ### Values of data and smooth energy for each GraphCut
t=0
bias <- bias_future <- array(0,c(nrow = height,ncol = width,length(model_names))) ### Creating the bias arrays to set the data and smooth cost functions
for(i in 1:length(model_names)){
bias[,,i] <- var_present[,,i] - ref
bias_future[,,i] <- var_future[,,i] - ref_future
}
bias_cpp = c(aperm(bias, c(2, 1, 3))) ### Permuting longitude and latitude since the indexing isn't the same in R and in C++
bias_future_cpp = c(aperm(bias_future, c(2, 1, 3)))
gco$setDataCost(ptrDataCost, list(numPix = width * height, data = bias_cpp, weight = weight_data))
gco$setSmoothCost(ptrSmoothCost, list(numPix = width * height, data = bias_cpp, weight = weight_smooth))
mat_init <- matrix(0,height,width) ### Creating an initialization matrix
vec_init <- as.vector(t(mat_min)) ### Permuting the indexing from R to C++
for(z in 0:(length(mat_init)-1)){
gco$setLabel(z,vec_init[z+1]) ### Setting the labels for the alpha-beta swap algorithm
}
# Optimizing the MRF energy with alpha-beta swap (-1 refers to the optimization until convergence)
gco$swap(-1)
data_cost <- gco$giveDataEnergy() ### Storing the energies for the GraphCut
smooth_cost <- gco$giveSmoothEnergy()
t=t+1
data_smooth_list[[t]] <- list("Data cost" = data_cost, "Smooth cost" = smooth_cost)
tmp_label_attribution <- matrix(0, nrow=height, ncol=width) ### Creating the label attribution matrix
for(j in 1:height){
for(i in 1:width){
tmp_label_attribution[j,i] <- gco$whatLabel((i - 1) + width * (j - 1)) ### Permuting from the C++ indexing to the R indexing
}
}
label_attribution[,,t] <- tmp_label_attribution
}
graphcut(var_present,var_future,1,1)
graphcut <- function(var_present,var_future,weight_data,weight_smooth){
### var_present and var_future : arrays of models outputs used in the GraphCut
### weight_data and weight_smooth : number (1 for both is approximatly the optimal choice)
nlabs = length(model_names)-1 ### Number of labels used in the GC. Needs to be total number -1 since C++ index starts from 0
width = ncol(ref)
height = nrow(ref)
# Instanciation of the GraphCut environment
gco <- new(GCoptimizationGridGraph, width, height, nlabs)
# Preparing the DataCost and SmoothCost functions of the GraphCut in C++
ptrDataCost <- cppXPtr(
code = 'float dataFn(int p, int l, Rcpp::List extraData)
{
int numPix = extraData["numPix"];
float weight = extraData["weight"];
NumericVector data = extraData["data"];
return(weight * std::abs(data[p + numPix * l]) );
}',
includes = c("#include <math.h>", "#include <Rcpp.h>"),
rebuild = TRUE, showOutput = FALSE, verbose = TRUE
)
ptrSmoothCost <- cppXPtr(
code = 'float smoothFn(int p1, int p2, int l1, int l2, Rcpp::List extraData)
{
int numPix = extraData["numPix"];
float weight = extraData["weight"];
NumericVector data = extraData["data"];
float cost = std::abs(data[p1 + numPix * l1]-data[p1 + numPix * l2])
+ std::abs(data[p2 + numPix * l1] - data[p2 + numPix * l2]) ;
return(weight * cost);
}',
includes = c("#include <math.h>", "#include <Rcpp.h>"),
rebuild = TRUE, showOutput = FALSE, verbose = TRUE
)
# Preparing the data to perform GraphCut
label_attribution <- array(0,c(nrow = height,ncol = width,length(model_names))) ### Each dimension contains the GraphCut result for a given reference
data_smooth_list <- vector("list",length(model_names)) ### Values of data and smooth energy for each GraphCut
t=0
bias <- bias_future <- array(0,c(nrow = height,ncol = width,length(model_names))) ### Creating the bias arrays to set the data and smooth cost functions
for(i in 1:length(model_names)){
bias[,,i] <- var_present[,,i] - ref
bias_future[,,i] <- var_future[,,i] - ref_future
}
bias_cpp = c(aperm(bias, c(2, 1, 3))) ### Permuting longitude and latitude since the indexing isn't the same in R and in C++
bias_future_cpp = c(aperm(bias_future, c(2, 1, 3)))
gco$setDataCost(ptrDataCost, list(numPix = width * height, data = bias_cpp, weight = weight_data))
gco$setSmoothCost(ptrSmoothCost, list(numPix = width * height, data = bias_cpp, weight = weight_smooth))
mat_init <- matrix(0,height,width) ### Creating an initialization matrix
vec_init <- as.vector(t(mat_init)) ### Permuting the indexing from R to C++
for(z in 0:(length(mat_init)-1)){
gco$setLabel(z,vec_init[z+1]) ### Setting the labels for the alpha-beta swap algorithm
}
# Optimizing the MRF energy with alpha-beta swap (-1 refers to the optimization until convergence)
gco$swap(-1)
data_cost <- gco$giveDataEnergy() ### Storing the energies for the GraphCut
smooth_cost <- gco$giveSmoothEnergy()
t=t+1
data_smooth_list[[t]] <- list("Data cost" = data_cost, "Smooth cost" = smooth_cost)
tmp_label_attribution <- matrix(0, nrow=height, ncol=width) ### Creating the label attribution matrix
for(j in 1:height){
for(i in 1:width){
tmp_label_attribution[j,i] <- gco$whatLabel((i - 1) + width * (j - 1)) ### Permuting from the C++ indexing to the R indexing
}
}
label_attribution[,,t] <- tmp_label_attribution
}
graphcut(var_present,var_future,1,1)
graphcut <- function(var_present,var_future,weight_data,weight_smooth){
### var_present and var_future : arrays of models outputs used in the GraphCut
### weight_data and weight_smooth : number (1 for both is approximatly the optimal choice)
nlabs = length(model_names)-1 ### Number of labels used in the GC. Needs to be total number -1 since C++ index starts from 0
width = ncol(ref)
height = nrow(ref)
# Instanciation of the GraphCut environment
gco <- new(GCoptimizationGridGraph, width, height, nlabs)
# Preparing the DataCost and SmoothCost functions of the GraphCut in C++
ptrDataCost <- cppXPtr(
code = 'float dataFn(int p, int l, Rcpp::List extraData)
{
int numPix = extraData["numPix"];
float weight = extraData["weight"];
NumericVector data = extraData["data"];
return(weight * std::abs(data[p + numPix * l]) );
}',
includes = c("#include <math.h>", "#include <Rcpp.h>"),
rebuild = TRUE, showOutput = FALSE, verbose = TRUE
)
ptrSmoothCost <- cppXPtr(
code = 'float smoothFn(int p1, int p2, int l1, int l2, Rcpp::List extraData)
{
int numPix = extraData["numPix"];
float weight = extraData["weight"];
NumericVector data = extraData["data"];
float cost = std::abs(data[p1 + numPix * l1]-data[p1 + numPix * l2])
+ std::abs(data[p2 + numPix * l1] - data[p2 + numPix * l2]) ;
return(weight * cost);
}',
includes = c("#include <math.h>", "#include <Rcpp.h>"),
rebuild = TRUE, showOutput = FALSE, verbose = TRUE
)
# Preparing the data to perform GraphCut
label_attribution <- array(0,c(nrow = height,ncol = width,length(model_names))) ### Each dimension contains the GraphCut result for a given reference
data_smooth_list <- vector("list",length(model_names)) ### Values of data and smooth energy for each GraphCut
t=0
bias <- bias_future <- array(0,c(nrow = height,ncol = width,length(model_names))) ### Creating the bias arrays to set the data and smooth cost functions
for(i in 1:length(model_names)){
bias[,,i] <- var_present[,,i] - ref
bias_future[,,i] <- var_future[,,i] - ref_future
}
bias_cpp = c(aperm(bias, c(2, 1, 3))) ### Permuting longitude and latitude since the indexing isn't the same in R and in C++
bias_future_cpp = c(aperm(bias_future, c(2, 1, 3)))
gco$setDataCost(ptrDataCost, list(numPix = width * height, data = bias_cpp, weight = weight_data))
gco$setSmoothCost(ptrSmoothCost, list(numPix = width * height, data = bias_cpp, weight = weight_smooth))
mat_init <- matrix(0,height,width) ### Creating an initialization matrix
vec_init <- as.vector(t(mat_init)) ### Permuting the indexing from R to C++
for(z in 0:(length(mat_init)-1)){
gco$setLabel(z,vec_init[z+1]) ### Setting the labels for the alpha-beta swap algorithm
}
# Optimizing the MRF energy with alpha-beta swap (-1 refers to the optimization until convergence)
print("Starting GraphCut optimization...")
gco$swap(-1)
print("GraphCut optimization done.")
data_cost <- gco$giveDataEnergy() ### Storing the energies for the GraphCut
smooth_cost <- gco$giveSmoothEnergy()
t=t+1
data_smooth_list[[t]] <- list("Data cost" = data_cost, "Smooth cost" = smooth_cost)
tmp_label_attribution <- matrix(0, nrow=height, ncol=width) ### Creating the label attribution matrix
for(j in 1:height){
for(i in 1:width){
tmp_label_attribution[j,i] <- gco$whatLabel((i - 1) + width * (j - 1)) ### Permuting from the C++ indexing to the R indexing
}
}
label_attribution[,,t] <- tmp_label_attribution
}
graphcut(var_present,var_future,1,1)
?gco_wrapR
library(gcoWrapR)
list.of.packages <- c("ncdf4","RcppXPtrUtils","paramtest","reshape2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,repos = "http://cran.us.r-project.org")
lapply(list.of.packages, library, character.only = TRUE)
install_github("thaos/gcoWrapR")
library(gcoWrapR)
